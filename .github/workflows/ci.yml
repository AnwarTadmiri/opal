name: CI Workflow (Test, Build & Deploy)
on:
  push:
    branches: [ rk/fix-long-startup ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


env:
  AWS_REGION: "us-east-2"

permissions:
  id-token: write
  contents: write

jobs:
  test-code:
    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10"]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install flake8 pytest pytest-asyncio
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        if [ -f ./tests/requirements.txt ]; then pip install -r ./tests/requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

  test-docker:
    runs-on: ubuntu-latest
    steps:
      # BUILD PHASE
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Build client
        id: build_client
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile
          push: false
          target: client
          cache-from: type=registry,ref=permitio/opal-client:latest
          cache-to: type=inline
          load: true
          tags: |
            permitio/opal-client:test

      - name: Build server
        id: build_server
        uses: docker/build-push-action@v2
        with:
          file: docker/Dockerfile
          push: false
          target: server
          cache-from: type=registry,ref=permitio/opal-server:latest
          cache-to: type=inline
          load: true
          tags: |
            permitio/opal-server:test

      # TEST PHASE
      - name: Create modified docker compose file
        run: sed 's/:latest/:test/g' docker/docker-compose-with-callbacks.yml > docker/docker-compose-test.yml

      - name: Bring up stack
        run: docker-compose -f docker/docker-compose-test.yml up -d

      - name: Check if OPA is healthy
        run: ./scripts/wait-for.sh -t 2 http://localhost:8181/v1/data/users -- sleep 10 && curl -s "http://localhost:8181/v1/data/users" | jq '.result.bob.location.country == "US"'

      - name: Output container logs
        run: docker-compose -f docker/docker-compose-test.yml logs

      - name: check if opal-client was brought up
        run: |
          docker-compose -f docker/docker-compose-test.yml logs opal_client | grep "Connected to PubSub server"
          docker-compose -f docker/docker-compose-test.yml logs opal_client | grep "Got policy bundle"

  build:
    runs-on: ubuntu-latest
    name: Build Push
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: AWS Auth - Assume OIDC Github Role
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: githubactions

      - name: Amazon ECR Login - Root Account
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: OPAL - Build Tag Push to ECR - Root Account
        id: build-opal-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: opal-server-v2
          DOCKER_FILE_PATH: "./docker/Dockerfile"
          IMAGE_TAG: ${{ github.sha }}
        run: |

          docker buildx build -f $DOCKER_FILE_PATH --target server -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  update-staging:
    # On push to master - trigger sync of permit-deployments so staging would be deployed with new version
    if: ${{ !failure() && !cancelled() && github.ref == 'refs/heads/private' && github.event_name == 'push' }}
    needs: [test-code, test-docker, build]
    runs-on: ubuntu-latest
    steps:
    - name: Get Token
      id: get_workflow_token
      uses: peter-murray/workflow-application-token-action@v1
      with:
        application_id: ${{ secrets.APPLICATION_ID }}
        application_private_key: ${{ secrets.APPLICATION_PRIVATE_KEY }}

    - name: Trigger Deployments Sync
      uses: actions/github-script@v6
      with:
        github-token: ${{ steps.get_workflow_token.outputs.token }}
        script: |
          await github.rest.actions.createWorkflowDispatch({
            owner: 'permitio',
            repo: 'permit-deployments',
            workflow_id: 'sync.yml',
            ref: 'main'
          })
