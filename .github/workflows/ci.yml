name: Release Private OPAL
on: push

env:
  AWS_REGION: "us-east-2"

permissions:
  id-token: write
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    name: Build Push
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: AWS Auth - Assume OIDC Github Role
        uses: aws-actions/configure-aws-credentials@v1.6.1
        with:
          role-to-assume: ${{ secrets.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: githubactions

      - name: Amazon ECR Login - Root Account
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: OPAL - Build Tag Push to ECR - Root Account
        id: build-opal-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: opal-server-v2
          DOCKER_FILE_PATH: "./docker/Dockerfile"
          IMAGE_TAG: ${{ github.sha }}
        run: |

          docker buildx build -f $DOCKER_FILE_PATH --target server -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: OPAL Worker - Build Tag Push to ECR - Root Account
        id: build-opal-worker-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: permit-opal-worker-v2
          DOCKER_FILE_PATH: "./docker/Dockerfile"
          IMAGE_TAG: ${{ github.sha }}
        run: |

          docker buildx build -f $DOCKER_FILE_PATH --target server -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
 
      - name: Get commit msg
        # This is for creating the version update PR to permit-deployments,
        #   do it here to avoid checking out backend's repo again
        id: extract-commit-msg
        run: |
          echo "::set-output name=commit-msg-title::$(git log -1 --pretty=%B | cat | head -n 1)"
          COMMIT_MSG=$(git log -1 --pretty=%B | cat)
          COMMIT_MSG="${COMMIT_MSG//'%'/'%25'}"
          COMMIT_MSG="${COMMIT_MSG//$'\n'/'%0A'}"
          COMMIT_MSG="${COMMIT_MSG//$'\r'/'%0D'}"
          echo "::set-output name=commit-msg::$COMMIT_MSG"

  update-deployments:
    # On push to master - creates a PR for permit-deployments to upgrade the backend git ref
    #   this would automatically trigger permit-deployments's workflow to deploy staging to the latest version (without having to merge the PR)
    if: ${{ !failure() && !cancelled() && github.ref == 'refs/heads/private' && github.event_name == 'push' }}
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        repository: permitio/permit-deployments
        ref: main
        token: ${{ secrets.GH_TOKEN }}

    - name: Update production tracked revision
      uses: mikefarah/yq@master
      with:
        cmd: yq eval -i '.prod.opal-git-ref = "${{ github.sha }}"' './versions.yaml'

    - name: Update production documentary link to commit
      uses: mikefarah/yq@master
      with:
        cmd: yq eval -i '.prod.opal-git-link = "https://github.com/permitio/permit-backend/commit/${{ github.sha }}"' './versions.yaml'

    - name: Create PR for permit-deployments
      run: |
        git config user.name "$GITHUB_ACTOR"
        git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
        export SHORT_SHA=${FULL_SHA::7}
        export BRANCH=auto-update/opal_$SHORT_SHA
        git checkout -b $BRANCH
        git commit -a -F- <<EOF
        Update permit-backend: "${{ needs.build.outputs.commit-msg-title }}" ($SHORT_SHA)

        ${{ needs.build.outputs.commit-msg }}
        production's backend version upgraded to $FULL_SHA : https://github.com/permitio/opal-private/commit/$FULL_SHA
        This commit is auto-generated by Github Actions workflow of opal-private
        EOF
        git push --set-upstream origin $BRANCH
        gh pr create --fill --reviewer asafc
      env:
        FULL_SHA: ${{ github.sha }}
        GITHUB_TOKEN: ${{secrets.GH_TOKEN}}

    - name: Automatically merge PR
      # To achieve full CI/CD - turn this on
      if: ${{ false }}
      run: |
        gh pr merge
